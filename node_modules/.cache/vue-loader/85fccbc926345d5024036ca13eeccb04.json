{"remainingRequest":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maizuru1/umilog_app/umilog_APP/src/components/ChartTest.vue?vue&type=style&index=0&id=c4d58e88&prod&lang=scss&scoped=true&","dependencies":[{"path":"/Users/maizuru1/umilog_app/umilog_APP/src/components/ChartTest.vue","mtime":1694161580902},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/css-loader/dist/cjs.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/postcss-loader/src/index.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/sass-loader/dist/cjs.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/cache-loader/dist/cjs.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/index.js","mtime":1692338943000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci53cmFwcGVyewogICAgd2lkdGg6IDgwJTsKICAgIG1hcmdpbjogMCBhdXRvOwogICAgY2FudmFzewogICAgICAgIG1hcmdpbi10b3A6IDMwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogNTBweDsKICAgIH0KfQo="},{"version":3,"sources":["ChartTest.vue"],"names":[],"mappings":";AA6WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChartTest.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div class=\"wrapper\">\n            <div>\n                <canvas id=\"oxygen\">ここにあるよ</canvas>\n            </div>\n            <div>\n                <canvas id=\"chloro\">ここにあるよ</canvas>\n            </div>\n        </div>\n        <div class=\"wrapper\">\n            <div>\n                <canvas id=\"salinity\">ここにあるよ</canvas>\n            </div>\n            <div>\n                <canvas id=\"water_temp\">ここにあるよ</canvas>\n            </div>\n        </div>\n        <div class=\"wrapper\">\n            <div>\n                <canvas id=\"turbidity\">ここにあるよ</canvas>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Chart from 'chart.js';\nexport default class ChartTest extends Vue{\n    Oxygen:any;\n    Chloro:any;\n    Salinity:any;\n    Water_temp:any;\n    Turbidity:any;\n\n    plot_data(extract_data:{[key:number]:Array<any>}){\n        let ctx1=<HTMLCanvasElement>document.getElementById(\"oxygen\");\n        let data_length=extract_data[1].length;\n        this.Oxygen = new Chart(ctx1,{\n            type:'line',\n            data:{\n                labels:[...Array(data_length)].map((_,index)=>index),\n                datasets:[\n                    {\n                        //3,6,9,11\n                        label:\"3[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[3][index].oxygen);\n                        }),\n                        borderColor: \"rgba(255,0,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"6[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[6][index].oxygen);\n                        }),\n                        borderColor: \"rgba(0,0,255,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"9[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[9][index].oxygen);\n                        }),\n                        borderColor: \"rgba(0,255,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"11[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[11][index].oxygen);\n                        }),\n                        borderColor: \"rgba(100,100,100,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    }\n                ]\n            },\n            options:{\n                title:{\n                    display:true,\n                    text:\"溶存酸素\"\n                },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        // suggestedMax: 8,\n                        // suggestedMin: 5,\n                        // stepSize: 3,\n                        callback: function(value, index, values){\n                            return value;\n                            // return  value +  'm';\n                            }\n                        }\n                    }]\n                }\n            }\n       })\n        let ctx2=<HTMLCanvasElement>document.getElementById(\"chloro\");\n        this.Chloro = new Chart(ctx2, {\n            type:'line',\n            data:{\n                labels:[...Array(data_length)].map((_,index)=>index),\n                datasets:[\n                    {\n                        label:\"3[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[3][index].chlorophyll);\n                        }),\n                        borderColor: \"rgba(255,0,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"6[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[6][index].chlorophyll);\n                        }),\n                        borderColor: \"rgba(0,0,255,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"9[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[9][index].chlorophyll);\n                        }),\n                        borderColor: \"rgba(0,255,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"11[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[11][index].chlorophyll);\n                        }),\n                        borderColor: \"rgba(100,100,100,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    }\n                ]\n            },\n            options:{\n                title:{\n                    display:true,\n                    text:\"クロロ\"\n                },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        // suggestedMax: 2,\n                        // suggestedMin: 0,\n                        // stepSize: 2,\n                        callback: function(value, index, values){\n                            return value;\n                            // return  value +  'm';\n                            }\n                        }\n                    }]\n                }\n            }\n        })\n        let ctx3=<HTMLCanvasElement>document.getElementById(\"salinity\");\n        this.Salinity = new Chart(ctx3, {\n            type:'line',\n            data:{\n                labels:[...Array(data_length)].map((_,index)=>index),\n                datasets:[\n                    {\n                        label:\"3[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[3][index].salinity);\n                        }),\n                        borderColor: \"rgba(255,0,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"6[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[6][index].salinity);\n                        }),\n                        borderColor: \"rgba(0,0,155,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"9[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[9][index].salinity);\n                        }),\n                        borderColor: \"rgba(0,255,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"11[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[11][index].salinity);\n                        }),\n                        borderColor: \"rgba(100,100,100,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    }\n                ]\n            },\n            options:{\n                title:{\n                    display:true,\n                    text:\"塩分濃度\"\n                },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        // suggestedMax: 40,\n                        // suggestedMin: 25,\n                        // stepSize: 5,\n                        callback: function(value, index, values){\n                            return value;\n                            // return  value +  'm';\n                            }\n                        }\n                    }]\n                }\n            }\n        })\n        let ctx4=<HTMLCanvasElement>document.getElementById(\"water_temp\");\n        this.Water_temp = new Chart(ctx4, {\n            type:'line',\n            data:{\n                labels:[...Array(data_length)].map((_,index)=>index),\n                datasets:[\n                    {\n                        label:\"3[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[3][index].water_temp);\n                        }),\n                        borderColor: \"rgba(255,0,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"6[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[6][index].water_temp);\n                        }),\n                        borderColor: \"rgba(0,0,255,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"9[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[9][index].water_temp);\n                        }),\n                        borderColor: \"rgba(0,255,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"11[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[11][index].water_temp);\n                        }),\n                        borderColor: \"rgba(100,100,100,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    }\n                ]\n            },\n            options:{\n                title:{\n                    display:true,\n                    text:\"水温\"\n                },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        // suggestedMax: 40,\n                        // suggestedMin: -10,\n                        // stepSize: 5,\n                        callback: function(value, index, values){\n                            return value;\n                            // return  value +  'm';\n                            }\n                        }\n                    }]\n                }\n            }\n        })\n        let ctx5=<HTMLCanvasElement>document.getElementById(\"turbidity\");\n        this.Turbidity = new Chart(ctx5, {\n            type:'line',\n            data:{\n                labels:[...Array(data_length)].map((_,index)=>index),\n                datasets:[\n                    {\n                        label:\"3[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[3][index].turbidity);\n                        }),\n                        borderColor: \"rgba(255,0,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"6[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[6][index].turbidity);\n                        }),\n                        borderColor: \"rgba(0,0,255,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"9[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[9][index].turbidity);\n                        }),\n                        borderColor: \"rgba(0,255,0,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    },\n                    {\n                        label:\"11[m]\",\n                        data:[...Array<number>(data_length)].map((_,index)=>{\n                            // extract_dataは配列でなく、整数キー（水深）の連想配列\n                            return Number(extract_data[11][index].turbidity);\n                        }),\n                        borderColor: \"rgba(100,100,100,1)\",\n                        backgroundColor: \"rgba(0,0,0,0)\"\n                    }\n                ]\n            },\n            options:{\n                title:{\n                    display:true,\n                    text:\"濁度\"\n                },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        // suggestedMax: 40,\n                        // suggestedMin: -10,\n                        // stepSize: 5,\n                        callback: function(value, index, values){\n                            return value;\n                            // return  value +  'm';\n                            }\n                        }\n                    }]\n                }\n            }\n        })\n    }\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.wrapper{\n    width: 80%;\n    margin: 0 auto;\n    canvas{\n        margin-top: 30px;\n        margin-bottom: 50px;\n    }\n}\n</style>"]}]}