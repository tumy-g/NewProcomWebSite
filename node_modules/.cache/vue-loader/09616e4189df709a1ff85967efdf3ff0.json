{"remainingRequest":"/Users/maizuru1/umilog_app/umilog_APPのコピー/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maizuru1/umilog_app/umilog_APPのコピー/src/components/ AxiosTest.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/maizuru1/umilog_app/umilog_APPのコピー/src/components/ AxiosTest.vue","mtime":1695373985734},{"path":"/Users/maizuru1/umilog_app/umilog_APPのコピー/node_modules/cache-loader/dist/cjs.js","mtime":1694229983493},{"path":"/Users/maizuru1/umilog_app/umilog_APPのコピー/node_modules/babel-loader/lib/index.js","mtime":1694229983145},{"path":"/Users/maizuru1/umilog_app/umilog_APPのコピー/node_modules/ts-loader/index.js","mtime":1694229987759},{"path":"/Users/maizuru1/umilog_app/umilog_APPのコピー/node_modules/cache-loader/dist/cjs.js","mtime":1694229983493},{"path":"/Users/maizuru1/umilog_app/umilog_APPのコピー/node_modules/vue-loader/lib/index.js","mtime":1694229988110}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":[" AxiosTest.vue"],"names":[],"mappingsfile":" AxiosTest.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n      <button @click=\"get_day_data()\">get data</button>\n      <!--- textに日付を入力　--->\n      <input type=\"text\" v-model=\"date\"/>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport axios from 'axios';\nimport Vue from 'vue';\n\nexport default class AxiosTest extends Vue {\n  //　日付を指定\n  // date:Date=new Date();\n  date:Date = new Date('2023-09-01');\n\n  //日・週・月のデータを格納する\n  day_data:{[key:number]:Array<any>}={};\n  week_12_data:{[key:number]:Array<any>}={};\n  month_data:{[key:number]:Array<any>}={};\n\n  async get_day_data(){\n      // postで送信するデータ\n      let post_data={\n          \"date\":[...Array(1)].map((_,index)=>{\n            let date:Date=new Date();\n            date.setDate(this.date.getDate()-index);\n            return date.toISOString().slice(0,10);\n          }),\n      };\n\n      //水深ごとのデータを持ってくる。\n      //  postでデータを送信\n      await axios.post('https://8bkd65vrbj.execute-api.ap-northeast-1.amazonaws.com/dev/query',post_data)\n          .then((response)=>{\n              // データ取得\n              let response_data=response.data.body;\n              // console.log(response_data);\n              // sort_data関数の戻り値（ソートされたデータ）を代入\n              let sort_data=this.sort_data(response_data);\n              //データを1日ごとに分ける\n              let split_day_data=this.split_day(sort_data);\n              // データを1時間ごとの集合に分ける\n              let split_hour_data=this.split_hour(split_day_data);\n              // データを水深毎にとる(指定された日のみ)\n              this.day_data=this.extract_data(split_hour_data[this.date.toISOString().slice(0,10)]);\n              console.log(this.day_data)\n          });\n  }\n\n  async get_week_data(){\n      // postで送信するデータ\n      let post_data={\n          \"date\":[...Array(7)].map((_,index)=>{\n            let date:Date=new Date();\n            date.setDate(this.date.getDate()-index);\n            return date.toISOString().slice(0,10);\n          }),\n      };\n\n      //水深ごとのデータを持ってくる。\n      //  postでデータを送信\n      await axios.post('https://8bkd65vrbj.execute-api.ap-northeast-1.amazonaws.com/dev/query',post_data)\n          .then((response)=>{\n              // データ取得\n              let response_data=response.data.body;\n              // console.log(response_data);\n              // sort_data関数の戻り値（ソートされたデータ）を代入\n              let sort_data=this.sort_data(response_data);\n              //データを1日ごとに分ける\n              let split_day_data=this.split_day(sort_data);\n              // データを1時間ごとの集合に分ける\n              let split_hour_data=this.split_hour(split_day_data);\n              // データを水深毎にとる（１週間分のデータで、その日の12時のデータを表示）\n              this.week_12_data=this.week_12(split_hour_data);\n          });\n  }\n\n  async get_month_data(){\n      // postで送信するデータ\n      let post_data={\n          \"date\":[...Array(30)].map((_,index)=>{\n            let date:Date=new Date();\n            date.setDate(this.date.getDate()-index);\n            return date.toISOString().slice(0,10);\n          }),\n      };\n\n      //水深ごとのデータを持ってくる。\n      //  postでデータを送信\n      await axios.post('https://8bkd65vrbj.execute-api.ap-northeast-1.amazonaws.com/dev/query',post_data)\n          .then((response)=>{\n              // データ取得\n              let response_data=response.data.body;\n              // console.log(response_data);\n              // sort_data関数の戻り値（ソートされたデータ）を代入\n              let sort_data=this.sort_data(response_data);\n              //データを1日ごとに分ける\n              let split_day_data=this.split_day(sort_data);\n              // データを1時間ごとの集合に分ける\n              let split_hour_data=this.split_hour(split_day_data);\n              // データを水深毎にとる（１ヶ月分のデータで、その日の12時のデータを表示）\n              this.month_data=this.month_12(split_hour_data);\n          });\n  }\n\n  // データをソートするための関数\n  sort_data(response_data:any){\n    let time_data:Array<string>=[]\n    let sort_data:any=[];\n    response_data.forEach((element: { timestamp: string; }) => {\n      time_data.push(element.timestamp);\n    });\n    time_data.sort();\n    time_data.forEach((time)=>{\n      response_data.forEach((element: { timestamp: string; }) => {\n        if (time==element.timestamp){\n          sort_data.push(element);\n        }\n      });\n    });\n    return sort_data;\n  }\n\n  //データを1日毎のグループに分割\n  split_day(sort_data:any){\n    let map:{[key:string]:Array<any>}={};\n      let day=\"\"\n      sort_data.forEach((element: { timestamp: string; }) => {\n        if (day!=element.timestamp.slice(0,10)){\n        map[element.timestamp.slice(0,10)]=[element];\n        }\n        else{\n          let array=map[element.timestamp.slice(0,10)]\n          array.push(element);\n          map[element.timestamp.slice(0,10)]=array;\n        }\n        day=element.timestamp.slice(0,10);\n      });\n      return map;\n  }\n\n  // データを１時間毎のグループに分割\n  split_hour(split_day_data:{[key:string]:Array<any>}){\n    let main_map:{[key:string]:{[key:string]:Array<any>}}={};\n      for (let [key,value] of Object.entries(split_day_data)){\n        let map:{[key:string]:Array<any>}={};\n        let hour=\"\"\n        value.forEach((element: { timestamp: string; }) => {\n          if (hour!=element.timestamp.slice(11,13)){\n          map[element.timestamp.slice(11,13)]=[element];\n          }\n          else{\n            let array=map[element.timestamp.slice(11,13)]\n            array.push(element);\n            map[element.timestamp.slice(11,13)]=array;\n          }\n          hour=element.timestamp.slice(11,13);\n        });\n        main_map[key]=map;\n      }\n      console.log(main_map);\n      return main_map;\n  }\n\n  // 各水深におけるデータに分割\n  extract_data(split_data:{[key:string]:Array<any>}){\n    let extract_data:{[key:number]:Array<any>}={};\n    for(let i=1; i<=11; i++){\n      extract_data[i]=[]\n      for (let key in split_data){\n        let data:any;\n        let deff_array:Array<number>=[];\n        split_data[key].forEach((element:{deep:string})=>{\n          if (element.deep!=\"None\"){\n            deff_array.push(Math.abs(Number(element.deep)-i));\n          }\n        });\n        let min=Math.min(...deff_array);\n        let index=deff_array.indexOf(min);\n        data=split_data[key][index];\n        extract_data[i].push(data);\n      }\n    }\n    for (let key in extract_data){\n      extract_data[key]=this.sort_data(extract_data[key]);\n    }\n    return extract_data;\n  }\n\n  // 一週間分の12時のデータ取得\n  week_12(split_hour_data:{[key:string]:{[key:string]:Array<any>}}){\n    let map:{[key:string]:Array<any>}={};\n    let keys=Object.keys(split_hour_data).slice(-7);\n    keys.forEach((key)=>{\n      if (\"12\" in split_hour_data[key]){\n        map[key]=split_hour_data[key][\"12\"];\n      }else{\n        let keys2=Object.keys(split_hour_data[key]);\n        map[key]=split_hour_data[key][keys2.pop() as string];\n      }\n    });\n    map=this.extract_data(map);\n    return map;\n  }\n\n  // １ヶ月分の12時のデータ取得\n  month_12(split_hour_data:{[key:string]:{[key:string]:Array<any>}}){\n    let map:{[key:string]:Array<any>}={};\n    for (let [key,value] of Object.entries(split_hour_data)){\n      if (\"12\" in value){\n        map[key]=value[\"12\"];\n      }else{\n        let keys=Object.keys(value);\n        map[key]=value[keys.pop() as string];\n      }\n    }\n    map=this.extract_data(map);\n    return map;\n  }\n}\n</script>"]}]}