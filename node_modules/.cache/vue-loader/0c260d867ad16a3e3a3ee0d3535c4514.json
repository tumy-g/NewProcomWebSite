{"remainingRequest":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maizuru1/umilog_app/umilog_APP/src/components/ AxiosTest.vue?vue&type=style&index=0&id=a1ea1010&lang=scss&scoped=true&","dependencies":[{"path":"/Users/maizuru1/umilog_app/umilog_APP/src/components/ AxiosTest.vue","mtime":1694064221616},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/css-loader/dist/cjs.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/postcss-loader/src/index.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/sass-loader/dist/cjs.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/cache-loader/dist/cjs.js","mtime":1692338943000},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/index.js","mtime":1692338943000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgpkaXZ7CiAgYnV0dG9uewogICAgd2lkdGg6IDEwMHB4OwogICAgaGVpZ2h0OiA1MHB4OwogICAgYm9yZGVyLXJhZGl1czogMTAlOwogIH0KICBpbnB1dHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICB9Cn0KCg=="},{"version":3,"sources":[" AxiosTest.vue"],"names":[],"mappings":";;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":" AxiosTest.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n      <button @click=\"get_data()\">get data</button>\n      <!--- textに日付を入力　--->\n      <input type=\"text\" v-model=\"text\"/>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport axios from 'axios';\nimport Vue from 'vue';\n\nexport default class AxiosTest extends Vue {\n  //　日付を指定\n  text:string=new Date().toISOString().slice(0, 10);\n\n\n  async get_data(){\n      // postで送信するデータ\n      let post_data={\n          \"date\":this.text,\n      };\n\n      //水深ごとのデータを持ってくる。\n      //  postでデータを送信\n      let extract_data:{[key:number]:Array<any>} = await axios.post('https://8bkd65vrbj.execute-api.ap-northeast-1.amazonaws.com/dev',post_data)\n          .then((response)=>{\n              // データ取得\n              let response_data=response.data.body;\n              // console.log(response_data);\n              // sort_data関数の戻り値（ソートされたデータ）を代入\n              let sort_data=this.sort_data(response_data);\n              // データを1時間ごとの集合に分ける\n              let split_data=this.split_hour(sort_data);\n              // データを水深毎にとる\n              let extract_data2=this.extract_data(split_data);\n              // console.log(extract_data2);\n              //5mなのでインデックス５\n              console.log(extract_data2[5]);\n              console.log(extract_data2[10]);\n\n              return extract_data2;\n          });\n          return extract_data\n  }\n\n  // データをソートするための関数\n  sort_data(response_data:any){\n    let time_data:Array<string>=[]\n    let sort_data:any=[];\n    response_data.forEach((element: { timestamp: string; }) => {\n      time_data.push(element.timestamp);\n    });\n    time_data.sort();\n    time_data.forEach((time)=>{\n      response_data.forEach((element: { timestamp: string; }) => {\n        if (time==element.timestamp){\n          sort_data.push(element);\n        }\n      });\n    });\n    return sort_data\n  }\n\n  // データを１時間毎のグループに分割\n  split_hour(sort_data:any){\n    let map:{[key:string]:Array<any>}={};\n      let hour=\"\"\n      sort_data.forEach((element: { timestamp: string; }) => {\n        if (hour!=element.timestamp.slice(11,13)){\n        map[element.timestamp.slice(11,13)]=[element];\n        }\n        else{\n          let array=map[element.timestamp.slice(11,13)]\n          array.push(element);\n          map[element.timestamp.slice(11,13)]=array;\n        }\n        hour=element.timestamp.slice(11,13);\n      });\n      return map\n  }\n\n  // 各水深におけるデータに分割\n  extract_data(split_data:{[key:string]:Array<any>}){\n    let extract_data:{[key:number]:Array<any>}={};\n    for(let i=1; i<=11; i++){\n      extract_data[i]=[]\n      for (let key in split_data){\n        let data:any;\n        let deff_array:Array<number>=[];\n        split_data[key].forEach((element:{deep:string})=>{\n          if (element.deep!=\"None\"){\n            deff_array.push(Math.abs(Number(element.deep)-i));\n          }\n        });\n        let min=Math.min(...deff_array);\n        let index=deff_array.indexOf(min);\n        data=split_data[key][index];\n        extract_data[i].push(data);\n      }\n    }\n    for (let key in extract_data){\n      extract_data[key]=this.sort_data(extract_data[key]);\n    }\n    return extract_data;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\ndiv{\n  button{\n    width: 100px;\n    height: 50px;\n    border-radius: 10%;\n  }\n  input{\n    text-align: center;\n  }\n}\n\n</style>"]}]}