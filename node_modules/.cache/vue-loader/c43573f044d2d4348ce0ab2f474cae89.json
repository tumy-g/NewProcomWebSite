{"remainingRequest":"/Users/maizuru1/sand/sandbox/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/maizuru1/sand/sandbox/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/maizuru1/sand/sandbox/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maizuru1/sand/sandbox/src/views/About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"/Users/maizuru1/sand/sandbox/src/views/About.vue","mtime":1688780815905},{"path":"/Users/maizuru1/sand/sandbox/node_modules/cache-loader/dist/cjs.js","mtime":1687332690837},{"path":"/Users/maizuru1/sand/sandbox/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687332693180},{"path":"/Users/maizuru1/sand/sandbox/node_modules/cache-loader/dist/cjs.js","mtime":1687332690837},{"path":"/Users/maizuru1/sand/sandbox/node_modules/vue-loader/lib/index.js","mtime":1687332693179}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}