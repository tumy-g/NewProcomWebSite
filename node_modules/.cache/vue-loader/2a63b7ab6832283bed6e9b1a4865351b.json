{"remainingRequest":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maizuru1/umilog_app/umilog_APP/src/components/ AxiosTest.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/maizuru1/umilog_app/umilog_APP/src/components/ AxiosTest.vue","mtime":1694229988397},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/cache-loader/dist/cjs.js","mtime":1694229983493},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/babel-loader/lib/index.js","mtime":1694229983145},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/ts-loader/index.js","mtime":1694229987759},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/cache-loader/dist/cjs.js","mtime":1694229983493},{"path":"/Users/maizuru1/umilog_app/umilog_APP/node_modules/vue-loader/lib/index.js","mtime":1694229988110}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKCmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF4aW9zVGVzdCBleHRlbmRzIFZ1ZSB7CiAgLy/jgIDml6Xku5jjgpLmjIflrpoKICBkYXRlOkRhdGU9bmV3IERhdGUoKTsKCiAgLy/ml6Xjg7vpgLHjg7vmnIjjga7jg4fjg7zjgr/jgpLmoLzntI3jgZnjgosKICBkYXlfZGF0YTp7W2tleTpudW1iZXJdOkFycmF5PGFueT59PXt9OwogIHdlZWtfZGF0YTp7W2tleTpudW1iZXJdOkFycmF5PGFueT59PXt9OwogIHdlZWtfMTJfZGF0YTp7W2tleTpudW1iZXJdOkFycmF5PGFueT59PXt9OwogIG1vbnRoX2RhdGE6e1trZXk6bnVtYmVyXTpBcnJheTxhbnk+fT17fTsKCiAgYXN5bmMgZ2V0X2RhdGEoKXsKICAgICAgLy8gcG9zdOOBp+mAgeS/oeOBmeOCi+ODh+ODvOOCvwogICAgICBsZXQgcG9zdF9kYXRhPXsKICAgICAgICAgICJkYXRlIjpbLi4uQXJyYXkoNyldLm1hcCgoXyxpbmRleCk9PnsKICAgICAgICAgICAgbGV0IGRhdGU6RGF0ZT1uZXcgRGF0ZSgpOwogICAgICAgICAgICBkYXRlLnNldERhdGUodGhpcy5kYXRlLmdldERhdGUoKS1pbmRleCk7CiAgICAgICAgICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwxMCk7CiAgICAgICAgICB9KSwKICAgICAgfTsKCiAgICAgIC8v5rC05rex44GU44Go44Gu44OH44O844K/44KS5oyB44Gj44Gm44GP44KL44CCCiAgICAgIC8vICBwb3N044Gn44OH44O844K/44KS6YCB5L+hCiAgICAgIGF3YWl0IGF4aW9zLnBvc3QoJ2h0dHBzOi8vOGJrZDY1dnJiai5leGVjdXRlLWFwaS5hcC1ub3J0aGVhc3QtMS5hbWF6b25hd3MuY29tL2Rldi9xdWVyeScscG9zdF9kYXRhKQogICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKT0+ewogICAgICAgICAgICAgIC8vIOODh+ODvOOCv+WPluW+lwogICAgICAgICAgICAgIGxldCByZXNwb25zZV9kYXRhPXJlc3BvbnNlLmRhdGEuYm9keTsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNwb25zZV9kYXRhKTsKICAgICAgICAgICAgICAvLyBzb3J0X2RhdGHplqLmlbDjga7miLvjgorlgKTvvIjjgr3jg7zjg4jjgZXjgozjgZ/jg4fjg7zjgr/vvInjgpLku6PlhaUKICAgICAgICAgICAgICBsZXQgc29ydF9kYXRhPXRoaXMuc29ydF9kYXRhKHJlc3BvbnNlX2RhdGEpOwogICAgICAgICAgICAgIC8v44OH44O844K/44KSMeaXpeOBlOOBqOOBq+WIhuOBkeOCiwogICAgICAgICAgICAgIGxldCBzcGxpdF9kYXlfZGF0YT10aGlzLnNwbGl0X2RheShzb3J0X2RhdGEpOwogICAgICAgICAgICAgIC8vIOODh+ODvOOCv+OCkjHmmYLplpPjgZTjgajjga7pm4blkIjjgavliIbjgZHjgosKICAgICAgICAgICAgICBsZXQgc3BsaXRfaG91cl9kYXRhPXRoaXMuc3BsaXRfaG91cihzcGxpdF9kYXlfZGF0YSk7CiAgICAgICAgICAgICAgLy8g44OH44O844K/44KS5rC05rex5q+O44Gr44Go44KLKOaMh+WumuOBleOCjOOBn+aXpeOBruOBvykKICAgICAgICAgICAgICB0aGlzLmRheV9kYXRhPXRoaXMuZXh0cmFjdF9kYXRhKHNwbGl0X2hvdXJfZGF0YVt0aGlzLmRhdGUudG9JU09TdHJpbmcoKS5zbGljZSgwLDEwKV0pOwogICAgICAgICAgICAgIC8vIOODh+ODvOOCv+OCkuawtOa3seavjuOBq+OBqOOCi++8iO+8kemAsemWk+WIhuOBruODh+ODvOOCv+OBp+OAgeOBneOBruaXpeOBrjEy5pmC44Gu44OH44O844K/44KS6KGo56S677yJCiAgICAgICAgICAgICAgdGhpcy53ZWVrXzEyX2RhdGE9dGhpcy53ZWVrXzEyKHNwbGl0X2hvdXJfZGF0YSk7CiAgICAgICAgICAgICAgLy8g44OH44O844K/44KS5rC05rex5q+O44Gr44Go44KL77yI77yR6YCx6ZaT5YiG44Gu44OH44O844K/44Gn44CB44Gd44Gu5pel44Gu5bmz5Z2H44OH44O844K/44KS6KGo56S677yJCiAgICAgICAgICAgICAgLy90aGlzLndlZWtfZGF0YT10aGlzLndlZWtfYXZnKHNwbGl0X2hvdXJfZGF0YSk7CiAgICAgICAgICB9KTsKICB9CgogIC8vIOODh+ODvOOCv+OCkuOCveODvOODiOOBmeOCi+OBn+OCgeOBrumWouaVsAogIHNvcnRfZGF0YShyZXNwb25zZV9kYXRhOmFueSl7CiAgICBsZXQgdGltZV9kYXRhOkFycmF5PHN0cmluZz49W10KICAgIGxldCBzb3J0X2RhdGE6YW55PVtdOwogICAgcmVzcG9uc2VfZGF0YS5mb3JFYWNoKChlbGVtZW50OiB7IHRpbWVzdGFtcDogc3RyaW5nOyB9KSA9PiB7CiAgICAgIHRpbWVfZGF0YS5wdXNoKGVsZW1lbnQudGltZXN0YW1wKTsKICAgIH0pOwogICAgdGltZV9kYXRhLnNvcnQoKTsKICAgIHRpbWVfZGF0YS5mb3JFYWNoKCh0aW1lKT0+ewogICAgICByZXNwb25zZV9kYXRhLmZvckVhY2goKGVsZW1lbnQ6IHsgdGltZXN0YW1wOiBzdHJpbmc7IH0pID0+IHsKICAgICAgICBpZiAodGltZT09ZWxlbWVudC50aW1lc3RhbXApewogICAgICAgICAgc29ydF9kYXRhLnB1c2goZWxlbWVudCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogICAgcmV0dXJuIHNvcnRfZGF0YTsKICB9CgogIC8v44OH44O844K/44KSMeaXpeavjuOBruOCsOODq+ODvOODl+OBq+WIhuWJsgogIHNwbGl0X2RheShzb3J0X2RhdGE6YW55KXsKICAgIGxldCBtYXA6e1trZXk6c3RyaW5nXTpBcnJheTxhbnk+fT17fTsKICAgICAgbGV0IGRheT0iIgogICAgICBzb3J0X2RhdGEuZm9yRWFjaCgoZWxlbWVudDogeyB0aW1lc3RhbXA6IHN0cmluZzsgfSkgPT4gewogICAgICAgIGlmIChkYXkhPWVsZW1lbnQudGltZXN0YW1wLnNsaWNlKDAsMTApKXsKICAgICAgICBtYXBbZWxlbWVudC50aW1lc3RhbXAuc2xpY2UoMCwxMCldPVtlbGVtZW50XTsKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgIGxldCBhcnJheT1tYXBbZWxlbWVudC50aW1lc3RhbXAuc2xpY2UoMCwxMCldCiAgICAgICAgICBhcnJheS5wdXNoKGVsZW1lbnQpOwogICAgICAgICAgbWFwW2VsZW1lbnQudGltZXN0YW1wLnNsaWNlKDAsMTApXT1hcnJheTsKICAgICAgICB9CiAgICAgICAgZGF5PWVsZW1lbnQudGltZXN0YW1wLnNsaWNlKDAsMTApOwogICAgICB9KTsKICAgICAgcmV0dXJuIG1hcDsKICB9CgogIC8vIOODh+ODvOOCv+OCku+8keaZgumWk+avjuOBruOCsOODq+ODvOODl+OBq+WIhuWJsgogIHNwbGl0X2hvdXIoc3BsaXRfZGF5X2RhdGE6e1trZXk6c3RyaW5nXTpBcnJheTxhbnk+fSl7CiAgICBsZXQgbWFpbl9tYXA6e1trZXk6c3RyaW5nXTp7W2tleTpzdHJpbmddOkFycmF5PGFueT59fT17fTsKICAgICAgZm9yIChsZXQgW2tleSx2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc3BsaXRfZGF5X2RhdGEpKXsKICAgICAgICBsZXQgbWFwOntba2V5OnN0cmluZ106QXJyYXk8YW55Pn09e307CiAgICAgICAgbGV0IGhvdXI9IiIKICAgICAgICB2YWx1ZS5mb3JFYWNoKChlbGVtZW50OiB7IHRpbWVzdGFtcDogc3RyaW5nOyB9KSA9PiB7CiAgICAgICAgICBpZiAoaG91ciE9ZWxlbWVudC50aW1lc3RhbXAuc2xpY2UoMTEsMTMpKXsKICAgICAgICAgIG1hcFtlbGVtZW50LnRpbWVzdGFtcC5zbGljZSgxMSwxMyldPVtlbGVtZW50XTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgIGxldCBhcnJheT1tYXBbZWxlbWVudC50aW1lc3RhbXAuc2xpY2UoMTEsMTMpXQogICAgICAgICAgICBhcnJheS5wdXNoKGVsZW1lbnQpOwogICAgICAgICAgICBtYXBbZWxlbWVudC50aW1lc3RhbXAuc2xpY2UoMTEsMTMpXT1hcnJheTsKICAgICAgICAgIH0KICAgICAgICAgIGhvdXI9ZWxlbWVudC50aW1lc3RhbXAuc2xpY2UoMTEsMTMpOwogICAgICAgIH0pOwogICAgICAgIG1haW5fbWFwW2tleV09bWFwOwogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKG1haW5fbWFwKTsKICAgICAgcmV0dXJuIG1haW5fbWFwOwogIH0KCiAgLy8g5ZCE5rC05rex44Gr44GK44GR44KL44OH44O844K/44Gr5YiG5YmyCiAgZXh0cmFjdF9kYXRhKHNwbGl0X2RhdGE6e1trZXk6c3RyaW5nXTpBcnJheTxhbnk+fSl7CiAgICBsZXQgZXh0cmFjdF9kYXRhOntba2V5Om51bWJlcl06QXJyYXk8YW55Pn09e307CiAgICBmb3IobGV0IGk9MTsgaTw9MTE7IGkrKyl7CiAgICAgIGV4dHJhY3RfZGF0YVtpXT1bXQogICAgICBmb3IgKGxldCBrZXkgaW4gc3BsaXRfZGF0YSl7CiAgICAgICAgbGV0IGRhdGE6YW55OwogICAgICAgIGxldCBkZWZmX2FycmF5OkFycmF5PG51bWJlcj49W107CiAgICAgICAgc3BsaXRfZGF0YVtrZXldLmZvckVhY2goKGVsZW1lbnQ6e2RlZXA6c3RyaW5nfSk9PnsKICAgICAgICAgIGlmIChlbGVtZW50LmRlZXAhPSJOb25lIil7CiAgICAgICAgICAgIGRlZmZfYXJyYXkucHVzaChNYXRoLmFicyhOdW1iZXIoZWxlbWVudC5kZWVwKS1pKSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgbGV0IG1pbj1NYXRoLm1pbiguLi5kZWZmX2FycmF5KTsKICAgICAgICBsZXQgaW5kZXg9ZGVmZl9hcnJheS5pbmRleE9mKG1pbik7CiAgICAgICAgZGF0YT1zcGxpdF9kYXRhW2tleV1baW5kZXhdOwogICAgICAgIGV4dHJhY3RfZGF0YVtpXS5wdXNoKGRhdGEpOwogICAgICB9CiAgICB9CiAgICBmb3IgKGxldCBrZXkgaW4gZXh0cmFjdF9kYXRhKXsKICAgICAgZXh0cmFjdF9kYXRhW2tleV09dGhpcy5zb3J0X2RhdGEoZXh0cmFjdF9kYXRhW2tleV0pOwogICAgfQogICAgcmV0dXJuIGV4dHJhY3RfZGF0YTsKICB9CgogIC8vIDEy5pmC44Gu44OH44O844K/5Y+W5b6XCiAgd2Vla18xMihzcGxpdF9ob3VyX2RhdGE6e1trZXk6c3RyaW5nXTp7W2tleTpzdHJpbmddOkFycmF5PGFueT59fSl7CiAgICBsZXQgbWFwOntba2V5OnN0cmluZ106QXJyYXk8YW55Pn09e307CiAgICBmb3IgKGxldCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzcGxpdF9ob3VyX2RhdGEpKXsKICAgICAgbWFwW2tleV09dmFsdWVbIjEyIl0KICAgIH0KICAgIG1hcD10aGlzLmV4dHJhY3RfZGF0YShtYXApOwogICAgcmV0dXJuIG1hcDsKICB9Cn0K"},{"version":3,"sources":[" AxiosTest.vue"],"names":[],"mappings":";AASA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":" AxiosTest.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n      <button @click=\"get_data()\">get data</button>\n      <!--- textに日付を入力　--->\n      <input type=\"text\" v-model=\"date\"/>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport axios from 'axios';\nimport Vue from 'vue';\n\nexport default class AxiosTest extends Vue {\n  //　日付を指定\n  date:Date=new Date();\n\n  //日・週・月のデータを格納する\n  day_data:{[key:number]:Array<any>}={};\n  week_data:{[key:number]:Array<any>}={};\n  week_12_data:{[key:number]:Array<any>}={};\n  month_data:{[key:number]:Array<any>}={};\n\n  async get_data(){\n      // postで送信するデータ\n      let post_data={\n          \"date\":[...Array(7)].map((_,index)=>{\n            let date:Date=new Date();\n            date.setDate(this.date.getDate()-index);\n            return date.toISOString().slice(0,10);\n          }),\n      };\n\n      //水深ごとのデータを持ってくる。\n      //  postでデータを送信\n      await axios.post('https://8bkd65vrbj.execute-api.ap-northeast-1.amazonaws.com/dev/query',post_data)\n          .then((response)=>{\n              // データ取得\n              let response_data=response.data.body;\n              // console.log(response_data);\n              // sort_data関数の戻り値（ソートされたデータ）を代入\n              let sort_data=this.sort_data(response_data);\n              //データを1日ごとに分ける\n              let split_day_data=this.split_day(sort_data);\n              // データを1時間ごとの集合に分ける\n              let split_hour_data=this.split_hour(split_day_data);\n              // データを水深毎にとる(指定された日のみ)\n              this.day_data=this.extract_data(split_hour_data[this.date.toISOString().slice(0,10)]);\n              // データを水深毎にとる（１週間分のデータで、その日の12時のデータを表示）\n              this.week_12_data=this.week_12(split_hour_data);\n              // データを水深毎にとる（１週間分のデータで、その日の平均データを表示）\n              //this.week_data=this.week_avg(split_hour_data);\n          });\n  }\n\n  // データをソートするための関数\n  sort_data(response_data:any){\n    let time_data:Array<string>=[]\n    let sort_data:any=[];\n    response_data.forEach((element: { timestamp: string; }) => {\n      time_data.push(element.timestamp);\n    });\n    time_data.sort();\n    time_data.forEach((time)=>{\n      response_data.forEach((element: { timestamp: string; }) => {\n        if (time==element.timestamp){\n          sort_data.push(element);\n        }\n      });\n    });\n    return sort_data;\n  }\n\n  //データを1日毎のグループに分割\n  split_day(sort_data:any){\n    let map:{[key:string]:Array<any>}={};\n      let day=\"\"\n      sort_data.forEach((element: { timestamp: string; }) => {\n        if (day!=element.timestamp.slice(0,10)){\n        map[element.timestamp.slice(0,10)]=[element];\n        }\n        else{\n          let array=map[element.timestamp.slice(0,10)]\n          array.push(element);\n          map[element.timestamp.slice(0,10)]=array;\n        }\n        day=element.timestamp.slice(0,10);\n      });\n      return map;\n  }\n\n  // データを１時間毎のグループに分割\n  split_hour(split_day_data:{[key:string]:Array<any>}){\n    let main_map:{[key:string]:{[key:string]:Array<any>}}={};\n      for (let [key,value] of Object.entries(split_day_data)){\n        let map:{[key:string]:Array<any>}={};\n        let hour=\"\"\n        value.forEach((element: { timestamp: string; }) => {\n          if (hour!=element.timestamp.slice(11,13)){\n          map[element.timestamp.slice(11,13)]=[element];\n          }\n          else{\n            let array=map[element.timestamp.slice(11,13)]\n            array.push(element);\n            map[element.timestamp.slice(11,13)]=array;\n          }\n          hour=element.timestamp.slice(11,13);\n        });\n        main_map[key]=map;\n      }\n      console.log(main_map);\n      return main_map;\n  }\n\n  // 各水深におけるデータに分割\n  extract_data(split_data:{[key:string]:Array<any>}){\n    let extract_data:{[key:number]:Array<any>}={};\n    for(let i=1; i<=11; i++){\n      extract_data[i]=[]\n      for (let key in split_data){\n        let data:any;\n        let deff_array:Array<number>=[];\n        split_data[key].forEach((element:{deep:string})=>{\n          if (element.deep!=\"None\"){\n            deff_array.push(Math.abs(Number(element.deep)-i));\n          }\n        });\n        let min=Math.min(...deff_array);\n        let index=deff_array.indexOf(min);\n        data=split_data[key][index];\n        extract_data[i].push(data);\n      }\n    }\n    for (let key in extract_data){\n      extract_data[key]=this.sort_data(extract_data[key]);\n    }\n    return extract_data;\n  }\n\n  // 12時のデータ取得\n  week_12(split_hour_data:{[key:string]:{[key:string]:Array<any>}}){\n    let map:{[key:string]:Array<any>}={};\n    for (let [key,value] of Object.entries(split_hour_data)){\n      map[key]=value[\"12\"]\n    }\n    map=this.extract_data(map);\n    return map;\n  }\n}\n</script>"]}]}